# qd tree
tree <- qd
tree$node.label <- gsub("qd=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qd.tre")
# qi tree
tree <- qi
tree$node.label <- gsub("qi=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qi.tre")
# read 3 modified tree files for QC/QD/QI
tree_qc <- read.newick("tree_qc.tre", node.label='support')
tree_qd <- read.newick("tree_qd.tre", node.label='support')
tree_qi <- read.newick("tree_qi.tre", node.label='support')
# add a customized label for internode or inter-branch, i.e., qc/qd/qI
score_raw = paste(tree_qc@data$support,"/",tree_qd@data$support,"/",tree_qi@data$support,sep="")
score = gsub("NA/NA/NA","",score_raw)
score = gsub("NA","-",score)
View(score)
# set labeled QC tree as the main plot tree
tree <- tree_qc
tree@data$score <- score
root <- tree@data$node[is.na(tree@data$support)]
pdf(file="00.treeQC_rect_circ.pdf", width = 16, height = 18)
# (1)color circle points
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (2)color branch
ggtree(tree2, aes(color=cut(support, c(1, 0.2, 0, -0.05, -1))), layout="circular", size=1) +
theme_tree(legend.position=c(0.85, 0.24)) +
scale_colour_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
na.translate=T, na.value="gray",
guide="legend", name="Quartet Concordance(QC)",
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (3)color circle points and label each internode with QC/QD/QI
dev.off()
pdf(file="00.treeQC_rect_circ.pdf", width = 16, height = 18)
# (1)color circle points
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (2)color branch
ggtree(tree, aes(color=cut(support, c(1, 0.2, 0, -0.05, -1))), layout="circular", size=1) +
theme_tree(legend.position=c(0.85, 0.24)) +
scale_colour_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
na.translate=T, na.value="gray",
guide="legend", name="Quartet Concordance(QC)",
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (3)color circle points and label each internode with QC/QD/QI
dev.off()
list.files()
library(ggtree)
library(treeio)
library(ggplot2)
library(ape)
qc <- read.tree("RESULT.labeled.tre.qc")
qd <- read.tree("RESULT.labeled.tre.qd")
qi <- read.tree("RESULT.labeled.tre.qi")
# process node labels of above three labeled trees
# qc tree
tree <- qc
tree$node.label <- gsub("qc=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qc.tre")
# qd tree
tree <- qd
tree$node.label <- gsub("qd=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qd.tre")
# qi tree
tree <- qi
tree$node.label <- gsub("qi=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qi.tre")
# read 3 modified tree files for QC/QD/QI
tree_qc <- read.newick("tree_qc.tre", node.label='support')
tree_qd <- read.newick("tree_qd.tre", node.label='support')
tree_qi <- read.newick("tree_qi.tre", node.label='support')
# add a customized label for internode or inter-branch, i.e., qc/qd/qI
score_raw = paste(tree_qc@data$support,"/",tree_qd@data$support,"/",tree_qi@data$support,sep="")
score = gsub("NA/NA/NA","",score_raw)
score = gsub("NA","-",score)
View(score)
# set labeled QC tree as the main plot tree
tree <- tree_qc
tree@data$score <- score
#####################################################
# Partitioning quartet concordance. QC values were divided into four categories and this
# information was used to color circle points.
# drop the internodes without QC vaule
root <- tree@data$node[is.na(tree@data$support)]
pdf(file="00.treeQC_rect_circ.pdf", width = 16, height = 18)
# (1)color circle points
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (2)color branch
ggtree(tree, aes(color=cut(support, c(1, 0.2, 0, -0.05, -1))), layout="circular", size=1) +
theme_tree(legend.position=c(0.85, 0.24)) +
scale_colour_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
na.translate=T, na.value="gray",
guide="legend", name="Quartet Concordance(QC)",
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (3)color circle points and label each internode with QC/QD/QI
dev.off()
pdf(file="00.treeQC_rect_circ.pdf", width = 16, height = 18)
# (1)color circle points
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (2)color branch
ggtree(tree, aes(color=cut(support, c(1, 0.2, 0, -0.05, -1))), layout="circular", size=1) +
theme_tree(legend.position=c(0.85, 0.24)) +
scale_colour_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
na.translate=T, na.value="gray",
guide="legend", name="Quartet Concordance(QC)",
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
# (3)color circle points and label each internode with QC/QD/QI
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))+
geom_text(aes(label=score, x=branch), size=2, vjust=-.5)
dev.off()
list.files()
library(ggtree)
library(treeio)
library(ggplot2)
library(ape)
qc <- read.tree("RESULT.labeled.tre.qc")
qd <- read.tree("RESULT.labeled.tre.qd")
qi <- read.tree("RESULT.labeled.tre.qi")
# process node labels of above three labeled trees
# qc tree
tree <- qc
tree$node.label <- gsub("qc=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qc.tre")
# qd tree
tree <- qd
tree$node.label <- gsub("qd=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qd.tre")
# qi tree
tree <- qi
tree$node.label <- gsub("qi=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qi.tre")
# read 3 modified tree files for QC/QD/QI
tree_qc <- read.newick("tree_qc.tre", node.label='support')
tree_qd <- read.newick("tree_qd.tre", node.label='support')
tree_qi <- read.newick("tree_qi.tre", node.label='support')
# add a customized label for internode or inter-branch, i.e., qc/qd/qI
score_raw = paste(tree_qc@data$support,"/",tree_qd@data$support,"/",tree_qi@data$support,sep="")
score = gsub("NA/NA/NA","",score_raw)
score = gsub("NA","-",score)
View(score)
# set labeled QC tree as the main plot tree
tree <- tree_qc
tree@data$score <- score
root <- tree@data$node[is.na(tree@data$support)]
root
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
root=189
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
root
setwd("example")
list.files()
qc <- read.tree("RESULT.labeled.tre.qc")
# import packages
library(ggtree)
library(treeio)
library(ggplot2)
library(ape)
library(optparse)
qc <- read.tree("RESULT.labeled.tre.qc")
qd <- read.tree("RESULT.labeled.tre.qd")
qi <- read.tree("RESULT.labeled.tre.qi")
# process node labels of above three labeled trees
# qc tree
tree <- qc
tree$node.label <- gsub("qc=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qc.tre")
# qd tree
tree <- qd
tree$node.label <- gsub("qd=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qd.tre")
# qi tree
tree <- qi
tree$node.label <- gsub("qi=","",tree$node.label)
View(tree$node.label)
write.tree(tree,"tree_qi.tre")
# read 3 modified tree files for QC/QD/QI
tree_qc <- read.newick("tree_qc.tre", node.label='support')
tree_qd <- read.newick("tree_qd.tre", node.label='support')
tree_qi <- read.newick("tree_qi.tre", node.label='support')
# add a customized label for internode or inter-branch, i.e., qc/qd/qI
score_raw = paste(tree_qc@data$support,"/",tree_qd@data$support,"/",tree_qi@data$support,sep="")
score = gsub("NA/NA/NA","",score_raw)
score = gsub("NA","-",score)
View(score)
# set labeled QC tree as the main plot tree
tree <- tree_qc
tree@data$score <- score
#####################################################
# Partitioning quartet concordance. QC values were divided into four categories and this
# information was used to color circle points.
# drop the internodes without QC vaule
root <- tree@data$node[is.na(tree@data$support)]
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + #xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
pdf(file="00.treeQC_rect_circ3.pdf", width = 8, height = 11)
# (1)color circle points
ggtree(tree, size=0.5) +
geom_tiplab(size=2) + #xlim(0, 0.12) +
geom_nodepoint(aes(subset=!isTip & node != root, fill=cut(support, c(1, 0.2, 0, -0.05, -1))),
shape=21, size=4) +
theme_tree(legend.position=c(0.9, 0.18)) +
scale_fill_manual(values=c("#2F4F4F", "#98F898", "#FFCC99","#FF6600"),
guide="legend", name="Quartet Concordance(QC)",
breaks=c("(0.2,1]","(0,0.2]","(-0.05,0]","(-1,-0.05]"),
labels=expression(QC>0.2, 0 < QC * " <= 0.2", -0.05 < QC * " <= 0", QC <= -0.05))
dev.off()
?OptionParser
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog ",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
print(args)
?parse_args
# import packages
library(ggtree)
library(treeio)
library(ggplot2)
library(ape)
library(optparse)
# set parameters
#commandArgs(TRUE)
# set parameters
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog ",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
option_list <- list(
make_option(c("-c", "--qctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(c("-d", "--qdtreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(c("-i", "--qitreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(c("-f", "--fctreefile"), type = "character", default = NULL,
action = "store", help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog ",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
option_list = list(
make_option(c("-f", "--file"), type="character", default=NULL, help="dataset file name", metavar="character"),
make_option(c("-o", "--out"), type="character", default="out.txt", help="output file name [default = %default]", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog ",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
#usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
library(ggtree)
library(treeio)
library(ggplot2)
library(ape)
library(optparse)
# set parameters
#commandArgs(TRUE)
# set parameters
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
args <- parse_args(OptionParser(option_list = option_list,
#usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = NULL,
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = NULL,
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = NULL,
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
opts <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
View(opts)
option_list <- list(
# -n 为短参数 --name为参数调用时的名称，type:数据类型， action默认store就行，其他顾名思义。
make_option(c("-n", "--name"), type = "character", default = NULL,
action = "store", help = "项目名称，必须设置，最好简短且有意义"
),
make_option(c("-t", "--thread"), type = "integer", default = 4,
action = "store", help = "多线程, 默认为4, 请根据自己计算机资源设置"
),
make_option(c("-m", "--method"), type = "integer", default = 2,
action = "store",
help = "差异分析方法, 取值为1, 2(默认), 1:egdeR, 2:额外进行DESeq2 + Limma-voom"
),
make_option(c("-p", "--pvalue"), type = "numeric", default = 0.05,
action = "store", help = "差异基因筛选阈值p, 默认0.05"
),
make_option(c("-q", "--fdr"), type = "numeric", default = NULL,
action = "store", help = "差异基因筛选阈值fdr, 默认NULL"
),
make_option("--fc", type = "numeric", default = 2,
action = "store", help = "差异基因筛选阈值foldchange, 默认2,即为logfc=1"
)
)
parse_args(OptionParser(option_list = option_list,
usage = "此脚本为RNAseq差异分析流程!",
description = "格式: Rscript %prog [options]\n将清洗好的eset及group文件放在脚本运行目录下的data文件夹中"))
# set parameters
option_list <- list(
make_option(opt_str = c("-c", "--qctreefile"), type = "character", default = "RESULT.labeled.tre.qc",
help = "Required, tree file with QC value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-d", "--qdtreefile"), type = "character", default = "RESULT.labeled.tre.qd",
help = "Required, tree file with QD value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-i", "--qitreefile"), type = "character", default = "RESULT.labeled.tre.qi",
help = "Required, tree file with QI value labeled, that is one of outputs of QS method"),
make_option(opt_str = c("-f", "--fctreefile"), type = "character", default = "RESULT.labeled.tre.qd",
help = "Required, tree file with QC value labeled, that is one of outputs of QS method")
)
# parse parameters
opts <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
args <- parse_args(OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication."))
args_parser <- OptionParser(option_list = option_list,
usage = "Usage: Rscript %prog",
description = "This script is for visualization of quartetsampling outputs as the figures in its publication.")
args <- parse_args(args_parser)
?read.newick
tr_qc <- read.newick("example/RESULT.labeled.tre.qc", node.label='support')
tr_qc <- read.newick("RESULT.labeled.tre.qc", node.label='support')
tr_qc@data$support
tr_qc <- read.newick("tree_qc.tre", node.label='support')
tr_qc@data$support
?write.tree
file.path("./example", "tree_qc.tre")
file.path("./example/", "tree_qc.tre")
write.tree(tr_qc, file = file.path("../", "tree_qc.tre"))
write.tree(tr_qc, file = file.path("..", "tree_qc.tre"))
tr = "(i,(j,o))"
write.tree(tr, file = file.path("..", "tree_qc.tre"))
write.csv(tr, file = file.path("..", "tree_qc.tre")))
write.csv(tr, file = file.path("..", "tree_qc.tre"))
write.csv(tr, file = file.path("../", "tree_qc.tre"))
?pdf()
?ggtree
ggtree(tree, size=0.5)
ggtree(tr_qc, size=0.5)
ggtree(tr_qc, size=1)
?xlim()
ggtree(tr_qc, size=1)
?geom_tiplab
ggtree(tr_qc, size=1)+theme_tree2()
ggtree(tr_qc, size=1)+theme_tree2()+xlim(c(NA,NA))
ggtree(tr_qc, size=1)+theme_tree2()+xlim(c(NA,0.2))
ggtree(tr_qc, size=1)+theme_tree2()+xlim(c(NA))
ggtree(tr_qc, size=1)+theme_tree2()+xlim()
ggtree(tr_qc, size=1)+theme_tree2()+xlim_tree()
ggtree(tr_qc, size=1)+theme_tree2()+xlim(NA)
?legend.position
??legend.position
?theme_tree
ggtree(tr_qc, size=1)+theme_tree2()
ggtree(tr_qc, size=1)+theme_tree2()+theme_tree(legend.position = "none")
ggtree(tr_qc, size=1)+theme_tree2()+theme_tree(legend.position = "left")
?geom_tiplab
?xlim
?make_option
?ggtree
?geom_tiplab
?make_option
class(NA)
